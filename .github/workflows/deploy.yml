name: Deploy to Production

on:
  release: 
    types: [created]

jobs:

  build:
    runs-on: ubuntu-22.04
    outputs:
      build_artifact: ${{ steps.upload_build.outputs.artifact }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm i

      - name: Build project
        run: npm run build

  publish:
    runs-on: ubuntu-22.04
    needs: [build]
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for TEST key in .env
        id: check_test_key
        run: |
          if [ "${{ env.REACT_NODE_ENV }}" = "TEST" ] || [ "${{ env.REACT_NODE_ENV }}" = "DEV" ]; then
            echo "isTest=true" >> $GITHUB_OUTPUT
          else
            echo "isTest=false" >> $GITHUB_OUTPUT
          fi

      - name: Install wireguard
        if: steps.check_test_key.outputs.isTest == 'false'
        run: sudo apt-get update && sudo apt-get install -y wireguard resolvconf

      - name: Create WireGuard config
        if: steps.check_test_key.outputs.isTest == 'false'
        run: |
          echo -e "${{ secrets.WG_CONF }}" > ./wg0.conf

      - name: Setup WireGuard interface
        if: steps.check_test_key.outputs.isTest == 'false'
        run: |
          sudo wg-quick up ./wg0.conf
          sudo wg show

      - name: Setup ssh
        run: |
          echo -e "${{ secrets.SSHKEY }}" > identity
          chmod 400 identity
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSHHOST }} >> ~/.ssh/known_hosts
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
      
      - name: Delete old files
        env:
          SERVER_IP: ${{ secrets.SSHHOST }}
          SERVER_USER: ${{ secrets.SSHUSER }}
          DEPLOY_PATH: ${{ secrets.SSHPATH }}
        run: |
          ssh -i identity $SERVER_USER@$SERVER_IP "rm -rf $DEPLOY_PATH/*"

      - name: Publish new files
        env:
          SERVER_IP: ${{ secrets.SSHHOST }}
          SERVER_USER: ${{ secrets.SSHUSER }}
          DEPLOY_PATH: ${{ secrets.SSHPATH }}
        run: |
          scp -i identity -r ./* $SERVER_USER@$SERVER_IP:$DEPLOY_PATH
          ssh -i identity $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH && rm ./identity"

      - name: Down previous containers
        env:
          SERVER_IP: ${{ secrets.SSHHOST }}
          SERVER_USER: ${{ secrets.SSHUSER }}
          DEPLOY_PATH: ${{ secrets.SSHPATH }}
        run: |
          ssh -i identity $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH && docker compose ps -q norookezi.fr | grep . && docker compose down norookezi.fr || echo 'No container to stop'"

      - name: Build and start containers
        env:
          SERVER_IP: ${{ secrets.SSHHOST }}
          SERVER_USER: ${{ secrets.SSHUSER }}
          DEPLOY_PATH: ${{ secrets.SSHPATH }}
        run: |
          ssh -i identity $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH && docker compose build && docker compose up -d"